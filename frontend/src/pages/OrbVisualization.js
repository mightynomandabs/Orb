import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Navigation from '../components/Navigation';
import MainOrb from '../components/MainOrb';
import ParticleEffects from '../components/ParticleEffects';
import { Button } from '../components/ui/button';
import { Download, Share2, ArrowLeft, FileText } from 'lucide-react';
import { useEmotion } from '../context/EmotionContext';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

const OrbVisualization = () => {
  const navigate = useNavigate();
  const { emotionText, orbColor } = useEmotion();
  const [showContent, setShowContent] = useState(false);
  const [saving, setSaving] = useState(false);
  const orbContainerRef = useRef(null);

  useEffect(() => {
    // If no emotion text, redirect back to input
    if (!emotionText) {
      navigate('/');
      return;
    }

    // Play transformation sound and show content with delay
    const timer = setTimeout(() => {
      setShowContent(true);
      playTransformSound();
    }, 800);

    return () => clearTimeout(timer);
  }, [emotionText, navigate]);

  const playTransformSound = () => {
    // Enhanced sound effect
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      
      // Create a more complex sound
      const oscillator1 = audioContext.createOscillator();
      const oscillator2 = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator1.connect(gainNode);
      oscillator2.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator1.frequency.setValueAtTime(523.25, audioContext.currentTime); // C note
      oscillator2.frequency.setValueAtTime(659.25, audioContext.currentTime); // E note
      
      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1.5);
      
      oscillator1.start(audioContext.currentTime);
      oscillator2.start(audioContext.currentTime + 0.3);
      oscillator1.stop(audioContext.currentTime + 1.5);
      oscillator2.stop(audioContext.currentTime + 1.8);
    } catch (error) {
      console.log('Audio not supported');
    }
  };

  const handleSaveOrb = async () => {
    if (!orbContainerRef.current || saving) return;
    
    setSaving(true);
    
    try {
      const canvas = await html2canvas(orbContainerRef.current, {
        backgroundColor: 'transparent',
        scale: 2,
        useCORS: true
      });
      
      // Create download link
      const link = document.createElement('a');
      link.download = `orb-${orbColor}-${Date.now()}.png`;
      link.href = canvas.toDataURL();
      link.click();
      
      // Play success sound
      playSuccessSound();
      
    } catch (error) {
      console.error('Error saving orb:', error);
    }
    
    setSaving(false);
  };

  const handleExportPDF = async () => {
    if (!orbContainerRef.current || saving) return;
    
    setSaving(true);
    
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Add title
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.text('My Emotional Orb', pageWidth / 2, 30, { align: 'center' });
      
      // Add emotion text
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      const emotionTextLines = pdf.splitTextToSize(emotionText, pageWidth - 40);
      pdf.text(emotionTextLines, 20, 50);
      
      // Add orb image
      const canvas = await html2canvas(orbContainerRef.current, {
        backgroundColor: 'transparent',
        scale: 2,
        useCORS: true
      });
      
      const imgData = canvas.toDataURL('image/png');
      const imgWidth = 80;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      const imgX = (pageWidth - imgWidth) / 2;
      const imgY = 80;
      
      pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth, imgHeight);
      
      // Add metadata
      pdf.setFontSize(10);
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, pageHeight - 30);
      pdf.text(`Emotion: ${orbColor}`, 20, pageHeight - 25);
      pdf.text('Generated by OrbSocial', pageWidth / 2, pageHeight - 20, { align: 'center' });
      
      // Save the PDF
      pdf.save(`orb-${orbColor}-${Date.now()}.pdf`);
      
      // Play success sound
      playSuccessSound();
      
    } catch (error) {
      console.error('Error exporting PDF:', error);
    }
    
    setSaving(false);
  };

  const playSuccessSound = () => {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      gainNode.gain.setValueAtTime(0.05, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.5);
    } catch (error) {
      console.log('Audio not supported');
    }
  };

  const handleReturnToInput = () => {
    navigate('/');
  };

  const handleShareOrb = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Emotional Orb',
          text: `I created an orb from my emotions: "${emotionText.substring(0, 100)}..."`,
          url: window.location.href
        });
      } catch (error) {
        console.log('Sharing cancelled');
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href);
      alert('Link copied to clipboard!');
    }
  };

  if (!emotionText) {
    return null;
  }

  return (
    <div className="orb-visualization-page page-transition">
      <Navigation />
      <ParticleEffects />
      
      <div className="content-container">
        <header className="header">
          <h1 className="title">Orb</h1>
          <p className="subtitle">Your Emotional Universe</p>
        </header>

        <main className={`main-content ${showContent ? 'show' : ''}`}>
          <div className="orb-container-wrapper" ref={orbContainerRef}>
            <div className="orb-container enhanced">
              <MainOrb color={orbColor} />
            </div>
          </div>

          <div className="orb-content">
            <h2 className="main-text magical-text">Your emotion is now alive!</h2>
            <p className="content-subtitle">Try touching it to see how it responds</p>
            <p className="emotion-preview">"{emotionText.substring(0, 100)}{emotionText.length > 100 ? '...' : ''}"</p>
          </div>

          <div className="action-buttons">
            <Button 
              onClick={handleSaveOrb}
              disabled={saving}
              className="action-button save-button"
              variant="outline"
              size="sm"
            >
              <Download className="button-icon" />
              {saving ? 'Saving...' : 'Save PNG'}
            </Button>
            
            <Button 
              onClick={handleExportPDF}
              disabled={saving}
              className="action-button pdf-button"
              variant="outline"
              size="sm"
            >
              <FileText className="button-icon" />
              {saving ? 'Exporting...' : 'Export PDF'}
            </Button>
            
            <Button 
              onClick={handleShareOrb}
              className="action-button share-button"
              variant="outline"
              size="sm"
            >
              <Share2 className="button-icon" />
              Share
            </Button>
          </div>

          <Button 
            onClick={handleReturnToInput}
            className="return-button enhanced"
            variant="outline"
            size="lg"
          >
            <ArrowLeft className="button-icon" />
            Create Another Orb
          </Button>

          <p className="bottom-message fade-in-slow">Beautiful... your emotions are coming alive</p>
        </main>
      </div>
    </div>
  );
};

export default OrbVisualization;